//
//  NormalStyleTests.swift
//  CompositionalGridView_Tests
//
//  Created by tiennv166 on 02/05/2023.
//  Copyright Â© 2023 tiennv166. All rights reserved.
//

import Quick
import Nimble
@testable import CompositionalGridView

final class NormalStyleTests: QuickSpec {
    
    override func spec() {
        
        var sut: GridViewModel!
        var items: [TestCellModel]!
        
        describe("The sections generated by GridViewModel when the input items is empty") {
    
            beforeEach {
                items = []
            }
            
            context("and no has load more") {
                beforeEach {
                    sut = GridViewModel(items: items, hasLoadMore: false)
                }

                it("should has zero sections") {
                    expect(sut.sections).to(beEmpty())
                }
            }

            context("and has load more") {
                beforeEach {
                    sut = GridViewModel(items: items, hasLoadMore: true)
                }

                it("should has one section containing only the load more item") {
                    expect(sut.sections.count).to(equal(1))
                    let section = sut.sections.first
                    expect(section?.index).to(equal(0))
                    expect(section?.items.count).to(equal(1))
                    expect(section?.supplementaryItems).to(beEmpty())
                    expect(section?.items.first?.model.isEqualTo(LoadMoreCellModel())).to(beTruthy())
                }
            }
        }
        
        describe("The sections generated by GridViewModel when the input items is empty") {
            
            beforeEach {
                items = [
                    TestCellModel(index: 3, width: .fit, height: .fixed(40)),
                    TestCellModel(index: 0, width: .fit, height: .fixed(40)),
                    TestCellModel(index: 2, width: .fit, height: .fixed(40)),
                    TestCellModel(index: 1, width: .fit, height: .fixed(40))
                ]
            }
                        
            context("and no has load more") {
                beforeEach {
                    sut = GridViewModel(items: items, hasLoadMore: false)
                }

                it("should has one section") {
                    expect(sut.sections.count).to(equal(1))
                }
                
                it("the items contained in section should be sorted in ascending order by index") {
                    let section = sut.sections.first
                    expect(section?.index).to(equal(0))
                    expect(section?.items.count).to(equal(4))
                    expect(section?.items[0].model.isEqualTo(items[1])).to(beTruthy())
                    expect(section?.items[1].model.isEqualTo(items[3])).to(beTruthy())
                    expect(section?.items[2].model.isEqualTo(items[2])).to(beTruthy())
                    expect(section?.items[3].model.isEqualTo(items[0])).to(beTruthy())
                }
            }

            context("and has load more") {
                beforeEach {
                    sut = GridViewModel(items: items, hasLoadMore: true)
                }

                it("should has 2 sections") {
                    expect(sut.sections.count).to(equal(2))
                }
                
                it("the items contained in the 1st section should be sorted in ascending order by index") {
                    let section = sut.sections.first
                    expect(section?.index).to(equal(0))
                    expect(section?.items.count).to(equal(4))
                    expect(section?.items[0].model.isEqualTo(items[1])).to(beTruthy())
                    expect(section?.items[1].model.isEqualTo(items[3])).to(beTruthy())
                    expect(section?.items[2].model.isEqualTo(items[2])).to(beTruthy())
                    expect(section?.items[3].model.isEqualTo(items[0])).to(beTruthy())
                }
                
                it("the 2nd section should contain only load more item") {
                    let section = sut.sections.last
                    expect(section?.index).to(equal(1))
                    expect(section?.items.count).to(equal(1))
                    expect(section?.items.first?.model.isEqualTo(LoadMoreCellModel())).to(beTruthy())
                }
            }
        }
        
        describe("The layout items generated by GridViewModel") {
            
            var layout: GridViewLayoutSection?
            var containerSize: CGSize!
            
            beforeEach {
                items = [
                    TestCellModel(index: 0, width: .fixed(160), height: .fixed(80)),
                    TestCellModel(index: 1, width: .fixed(200), height: .fixed(120)),
                    TestCellModel(index: 2, width: .fixed(300), height: .fixed(240)),
                    TestCellModel(index: 3, width: .fixed(500), height: .fixed(360))
                ]
            }
            
            context("when the container size is narrow") {
                beforeEach {
                    sut = GridViewModel(items: items, hasLoadMore: false)
                    containerSize = CGSize(width: 50, height: 100)
                    layout = sut.makeLayoutSection(0, containerContentSize: containerSize, containerContentInsets: .zero)
                }
                
                it("should return correct layout") {
                    expect(layout).toNot(beNil())
                }
                
                it("the layout should has 4 rows and each row has one item") {
//                    expect(layout?.group.subitems.count).toEventually(equal(4))
                }
            }
        }
    }
}

/// The TestCellModel struct and TestCell class are just used to create dummy data for testing purposes and are not the focus of the unit test.
private struct TestCellModel: GridItemModelConfigurable {
    let index: Int
    let width: GridLayout.SizeType
    let height: GridLayout.SizeType
    
    init(index: Int, width: GridLayout.SizeType, height: GridLayout.SizeType) {
        self.index = index
        self.width = width
        self.height = height
    }
    
    var identity: String { "\(index)" }
    var reuseIdentifier: String { "TestCell" }
    var viewType: GridLayout.ViewType { .cell(TestCell.self) }
    var itemSize: GridLayout.Size { .init(width: width, height: height) }
    var layoutIndex: GridLayout.Index { .init(section: .init(index: 0, style: .normal), row: index) }
}

private class TestCell: UICollectionViewCell, GridCellConfigurable {}
